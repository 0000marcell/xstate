(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{181:function(t,n,s){"use strict";s.r(n);var a=s(0),e=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"transitions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#transitions","aria-hidden":"true"}},[t._v("#")]),t._v(" Transitions")]),t._v(" "),s("p",[t._v("A state transition defines what the "),s("strong",[t._v("next state")]),t._v(" is, given the "),s("strong",[t._v("current state")]),t._v(" and "),s("strong",[t._v("event")]),t._v(". State transitions are defined on state nodes, in the "),s("code",[t._v("on")]),t._v(" property:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Machine "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'xstate'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" promiseMachine "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("Machine")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  id"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'promise'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  initial"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'pending'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  states"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    pending"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      on"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{attrs:{class:"token comment"}},[t._v("// state transition (shorthand)")]),t._v("\n        "),s("span",{attrs:{class:"token comment"}},[t._v("// this is equivalent to { target: 'resolved' }")]),t._v("\n        "),s("span",{attrs:{class:"token constant"}},[t._v("RESOLVE")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'resolved'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n        "),s("span",{attrs:{class:"token comment"}},[t._v("// state transition (object)")]),t._v("\n        "),s("span",{attrs:{class:"token constant"}},[t._v("REJECT")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          target"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'rejected'")]),t._v("\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    resolved"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      type"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'final'")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    rejected"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      type"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'final'")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("In the above example, when the machine is in the "),s("code",[t._v("pending")]),t._v(" state and it receives a "),s("code",[t._v("RESOLVE")]),t._v(" event, it will transition to the "),s("code",[t._v("resolved")]),t._v(" state.")]),t._v(" "),s("p",[t._v("A state transition can be defined as:")]),t._v(" "),s("ul",[s("li",[t._v("a string, e.g., "),s("code",[t._v("RESOLVE: 'resolved'")]),t._v(", which is equivalent to...")]),t._v(" "),s("li",[t._v("an object with a "),s("code",[t._v("target")]),t._v(" property, e.g., "),s("code",[t._v("RESOLVE: { target: 'resolved' }")]),t._v(",")]),t._v(" "),s("li",[t._v("an array of transition objects, which are used for conditional transitions (see "),s("a",{attrs:{href:"/guides/guards"}},[t._v("guards")]),t._v(")")])])])}],!1,null,null,null);e.options.__file="transitions.md";n.default=e.exports}}]);